---
const staticProjects = [
    { 
        title: "Yumly", 
        tag: "Design",
        year: "2024-2025",
        img: "/imgs/ville.jpg",
        slug: "#yumly"
    }, 
    { 
        title: "Posters", 
        tag: "Graphisme",
        year: "2024-2025",
        img: "/imgs/ville.jpg", 
        slug: "#posters" 
    }, 
    { 
        title: "Site web de l'APG", 
        tag: "Développement",
        year: "2025",
        img: "/imgs/ville.jpg", 
        slug: "#apg" 
    }, 
    { 
        title: "Projets 3D", 
        tag: "3D",
        year: "2023-2025",
        img: "/imgs/ville.jpg", 
        slug: "#projets-3d" 
    }
];
---

<section class="projects-fullscreen-section">
    <div class="projects-container">
        {staticProjects.map((project, index) => (
            <div class="project-slide" data-project-index={index}>
                <a href={project.slug} class="project-link">
                    <div class="project-image-container">
                        <img 
                            src={project.img} 
                            alt={project.title}
                            class="project-image"
                        />
                    </div>
                    
                    <div class="transition-rectangles">
                        <div class="transition-rect" data-col="0"></div>
                        <div class="transition-rect" data-col="1"></div>
                        <div class="transition-rect transition-rect-desktop" data-col="2"></div>
                        <div class="transition-rect" data-col="3"></div>
                    </div>
                    
                    <div class="vertical-bars">
                        <div class="bar bar-1"></div>
                        <div class="bar bar-2"></div>
                        <div class="bar bar-3"></div>
                    </div>
                    
                    {/* Infos dans les colonnes */}
                    <div class="project-infos">
                        <div class="info-column info-col-title">
                            <span class="info-text">{project.title}</span>
                        </div>
                        <div class="info-column info-col-tag">
                            <span class="info-text">{project.tag}</span>
                        </div>
                        <div class="info-column info-col-year">
                            <span class="info-text">{project.year}</span>
                        </div>
                        <div class="info-column info-col-counter">
                            <span class="info-text">{index + 1}/{staticProjects.length}</span>
                        </div>
                    </div>
                </a>
            </div>
        ))}
    </div>
</section>

<style>
    .projects-fullscreen-section {
        position: relative;
    }

    .projects-container {
        position: relative;
        height: 100vh;
        width: 100%;
    }

    .project-slide {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100vh;
        opacity: 0;
        pointer-events: none;
        z-index: 1;
    }

    .project-slide.is-visible {
        opacity: 1;
        pointer-events: auto;
        z-index: 2;
    }

    .project-link {
        display: block;
        width: 100%;
        height: 100%;
        position: relative;
        cursor: pointer;
    }

    .project-image-container {
        position: absolute;
        inset: 0;
        z-index: 1;
    }

    .project-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .transition-rectangles {
        position: absolute;
        inset: 0;
        z-index: 5;
        pointer-events: none;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
    }

    .transition-rect {
        background: #1a1a1a;
        transform: scaleX(0);
        transform-origin: right center;
    }

    .vertical-bars {
        position: absolute;
        inset: 0;
        z-index: 10;
        pointer-events: none;
    }

    .bar {
        position: absolute;
        top: 0;
        height: 100%;
        width: 2px;
        background: rgba(255, 255, 255, 0.3);
    }

    .bar-1 {
        left: 25%;
    }

    .bar-2 {
        left: 50%;
    }

    .bar-3 {
        left: 75%;
    }

    /* Infos dans les colonnes */
    .project-infos {
        position: absolute;
        inset: 0;
        z-index: 15;
        pointer-events: none;
    }

    .info-column {
        position: absolute;
        top: 0;
        height: 100%;
        display: flex;
        align-items: center;
        padding-left: 2rem;
    }

    .info-col-title {
        left: 0%;
        width: 25%;
    }

    .info-col-tag {
        left: 25%;
        width: 25%;
    }

    .info-col-year {
        left: 50%;
        width: 25%;
    }

    .info-col-counter {
        left: 75%;
        width: 25%;
    }

    .info-text {
        color: white;
        font-size: 1rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    @media (max-width: 768px) {
        /* Masquer la colonne année */
        .info-col-year {
            display: none;
        }

        /* Masquer le 3e rectangle de transition */
        .transition-rect-desktop {
            display: none;
        }

        /* Passer à 3 colonnes pour les rectangles */
        .transition-rectangles {
            grid-template-columns: repeat(3, 1fr);
        }

        /* Masquer la barre du milieu */
        .bar-2 {
            display: none;
        }

        /* Réorganiser en 3 colonnes */
        .info-col-title {
            left: 0%;
            width: 33.333%;
        }

        .info-col-tag {
            left: 33.333%;
            width: 33.333%;
        }

        .info-col-counter {
            left: 66.666%;
            width: 33.333%;
        }

        /* Repositionner les barres */
        .bar-1 {
            left: 33.333%;
        }

        .bar-3 {
            left: 66.666%;
        }

        .info-column {
            padding-left: 1rem;
        }

        .info-text {
            font-size: 0.75rem;
        }
    }
</style>

<script>
    import { gsap } from 'gsap';
    import { ScrollTrigger } from 'gsap/ScrollTrigger';

    gsap.registerPlugin(ScrollTrigger);

    document.addEventListener('astro:page-load', () => {
        ScrollTrigger.getAll().forEach(st => st.kill());
        
        const section = document.querySelector('.projects-fullscreen-section');
        const slides = document.querySelectorAll('.project-slide');
        
        if (!section || slides.length === 0) return;

        const DELAY_PER_PROJECT = 800;

        slides[0].classList.add('is-visible');

        ScrollTrigger.create({
            trigger: section,
            start: 'top top',
            end: () => `+=${slides.length * DELAY_PER_PROJECT}vh`,
            pin: '.projects-container',
            anticipatePin: 1,
        });

        slides.forEach((slide, i) => {
            if (i < slides.length - 1) {
                const currentRects = slide.querySelectorAll('.transition-rect:not(.transition-rect-desktop), .transition-rect-desktop');
                const nextSlide = slides[i + 1];
                const nextRects = nextSlide.querySelectorAll('.transition-rect:not(.transition-rect-desktop), .transition-rect-desktop');
                
                ScrollTrigger.create({
                    trigger: section,
                    start: () => `top+=${(i + 1) * DELAY_PER_PROJECT}vh top`,
                    end: () => `top+=${(i + 2) * DELAY_PER_PROJECT}vh top`,
                    onEnter: () => {
                        const tl = gsap.timeline();
                        
                        tl.to(currentRects, {
                            scaleX: 1,
                            transformOrigin: 'right center',
                            stagger: 0.08,
                            duration: 0.4,
                            ease: 'power2.inOut'
                        })
                        .add(() => {
                            slide.classList.remove('is-visible');
                            nextSlide.classList.add('is-visible');
                        })
                        .set(nextRects, { scaleX: 1, transformOrigin: 'left center' })
                        .to(nextRects, {
                            scaleX: 0,
                            stagger: 0.08,
                            duration: 0.4,
                            ease: 'power2.inOut'
                        })
                        .set(currentRects, { scaleX: 0 });
                    },
                    onLeaveBack: () => {
                        const tl = gsap.timeline();
                        
                        tl.to(nextRects, {
                            scaleX: 1,
                            transformOrigin: 'right center',
                            stagger: 0.08,
                            duration: 0.4,
                            ease: 'power2.inOut'
                        })
                        .add(() => {
                            nextSlide.classList.remove('is-visible');
                            slide.classList.add('is-visible');
                        })
                        .set(currentRects, { scaleX: 1, transformOrigin: 'left center' })
                        .to(currentRects, {
                            scaleX: 0,
                            stagger: 0.08,
                            duration: 0.4,
                            ease: 'power2.inOut'
                        })
                        .set(nextRects, { scaleX: 0 });
                    }
                });
            }
        });
    });
</script>
